<?php

/**
 * @file
 * The BLP Flex Group Project module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupInterface;
use Drupal\social_group_flexible_group\FlexibleGroupContentVisibilityUpdate;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Database\Query\AlterableInterface; 

/**
 * Provide a method to alter array of group types used in open social.
 *
 * @param array $social_group_types
 *   List of group types used in open social.
 *
 * @ingroup social_group_api
 */
function blp_flex_groups_project_social_group_types_alter(array &$social_group_types) {
  $social_group_types[] = 'blp_project';
}

/**
 * Alter an array of routes that require content visibility access checks.
 *
 * @param array $content_routes
 *   List of routes that required flexible group content visibility checks.
 *
 * @ingroup social_group_api
 */
function blp_flex_groups_project_social_group_flexible_group_content_routes_alter(array &$content_routes) {
  $content_routes = [
    'entity.group.canonical',
    'view.group_information.page_group_about',
    'view.group_members.page_group_members',
    'social_group.stream',
    'view.group_events.page_group_events',
    'view.group_topics.page_group_topics',
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function blp_flex_groups_project_views_data_alter(array &$data) {
  $data['node_access']['blp_project_node_access'] = [
    'title' => t('Filter nodes, with visibility group, placed in group you are not a member of.'),
    'filter' => [
      'title' => t('Filter nodes, with visibility group, placed in group you are not a member of.'),
      'help' => t('Filter nodes, with visibility group, placed in group you are not a member of.'),
      'id' => 'blp_project_node_access',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function blp_flex_groups_project_form_group_project_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Lets remove group type from flexible group.
  // Editing is useless since the options are all in there.
  if ($form['group_type']['#disabled']) {
    // Remove all the options.
    // @see social_group_form_alter().
    unset($form['group_type']);
    unset($form['#fieldgroups']['group_settings']->children['group_type']);
    unset($form['#group_children']['group_type']);
  }
  $form['field_group_allowed_visibility']['#prefix'] =
    t('Altering the visibility options could result in changes in access for content within this group.');

  $form['actions']['submit']['#submit'][] = '_blp_flex_groups_project_edit_submit';
}

/**
 * Implements hook_form_alter().
 */
function blp_flex_groups_project_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Exposed Filter block on the all-groups overview and search.
  if ($form['#id'] === 'views-exposed-form-newest-groups-page-all-groups' ||
    $form['#id'] === 'views-exposed-form-search-groups-page-no-value' ||
    $form['#id'] === 'views-exposed-form-search-groups-page') {

    // Update filter values so it matches the join methods in the popover.
    if (!empty($form['field_group_allowed_join_method'])) {
      if (array_key_exists('added', $form['field_group_allowed_join_method']['#options'])) {
        $form['field_group_allowed_join_method']['#options']['added'] = t('Invite only');
      }
      if (array_key_exists('direct', $form['field_group_allowed_join_method']['#options'])) {
        $form['field_group_allowed_join_method']['#options']['direct'] = t('Open to join');
      }
      if (array_key_exists('request', $form['field_group_allowed_join_method']['#options'])) {
        $form['field_group_allowed_join_method']['#options']['request'] = t('Request to join');
      }
    }

    // Add states so this is only available when flexible groups is checked.
    // Could be hidden when only flexible groups is enabled, so check that.
    // @TODO remove this once everything is migrated to flexible groups.
    if (!empty($form['field_group_allowed_join_method']) &&
      !empty($form['type']['#options']) &&
      $form['type']['#type'] !== 'hidden') {
      $form['field_group_allowed_join_method']['#states'] = [
        'visible' => [
          ':input[name="type"]' => ['value' => 'blp_project'],
        ],
      ];
    }
  }
}

/**
 * Custom form submit handler for editing a flexible group.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _blp_flex_groups_project_edit_submit(array $form, FormStateInterface $form_state) {
  // Check if the visibility changed.
  $default_visibility = $form['field_group_allowed_visibility']['widget']['#default_value'];
  $new_visibility = $form_state->getValue('field_group_allowed_visibility');

  $changed_visibility = [];
  // If there was a visibility that we don't have anymore after editting
  // all the content that was inside the group with this visibility
  // will get the lowest visibility that is still checked.
  foreach ($default_visibility as $key => $option) {
    if (array_search($option, array_column($new_visibility, 'value')) === FALSE) {
      $changed_visibility[] = $option;
    }
  }

  // So there is now a visibility setting we don't support anymore
  // after editing. Make sure we update all the content that has this
  // to the next best optin.
  if (!empty($changed_visibility)) {
    $group = _social_group_get_current_group();

    // Update the default visibility of all the content.
    FlexibleGroupContentVisibilityUpdate::batchUpdateGroupContentVisibility($group, $changed_visibility, $new_visibility);

    // Make sure we clear cache tags accordingly.
    $cache_tags = _social_group_cache_tags($group);
    foreach ($cache_tags as $cache_tag) {
      Cache::invalidateTags([$cache_tag]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function blp_flex_groups_project_form_social_group_add_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Rearrange all the options so flexible is last
  // we will need the space for the configuration.
  $type_options = $form['group_settings']['group_type']['#options'];
  if (!empty($type_options['blp_project'])) {
    $flexible = $type_options['blp_project'];
    unset($form['group_settings']['group_type']['#options']['blp_project']);
    $form['group_settings']['group_type']['#options']['blp_project'] = $flexible;
  }
}



