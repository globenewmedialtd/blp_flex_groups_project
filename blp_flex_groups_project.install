<?php

/**
 * @file
 * Install and update functions for the blp_flex_groups_project module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\FieldConfigInterface;
use Drupal\search_api\Entity\Index;
use Drupal\taxonomy\Entity\Vocabulary;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 */
function blp_flex_groups_project_install() {
  // Set some default permissions.
  _blp_flex_groups_project_set_permissions();

  // Set module weight higher as the weight of the "Social Group" module because
  // needs have the Views group type field which added via the "Social Group"
  // module.
  module_set_weight('blp_flex_groups_project', 6);
}

/**
 * Function to set permissions.
 */
function _blp_flex_groups_project_set_permissions() {
  $roles = \Drupal::entityQuery('user_role')
    ->condition('id', 'administrator', '<>')
    ->execute();

  foreach ($roles as $role) {
    $permissions = _blp_flex_groups_project_get_permissions($role);
    user_role_grant_permissions($role, $permissions);
  }
}

/**
 * Build the permissions.
 *
 * @param string $role
 *   The role.
 *
 * @return array
 *   Returns an array containing the permissions.
 */
function _blp_flex_groups_project_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = [];

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], [
    'create blp_project group',
  ]);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], []);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], []);

  return $permissions[$role] ?? [];
}

/**
 * Add new field group visibility field to flexible groups.
 */
function blp_flex_groups_project_update_8901(&$sandbox) {
  $config_file = drupal_get_path('module', 'blp_flex_groups_project') . '/config/update/blp_flex_groups_project_update_8901.yml';

  if (is_file($config_file)) {
    $sandbox['configs'] = Yaml::parse(file_get_contents($config_file));
    if (!isset($sandbox['total'])) {
      // Count the amount we need to add to cover batching..
      $sandbox['total'] = count($sandbox['configs']);
      $sandbox['current'] = 0;
    }

    $names = array_keys($sandbox['configs']);
    $name = $names[$sandbox['current']++];
    $data = $sandbox['configs'][$name];

    $parts = explode('.', $name);

    switch ($parts[0] . '.' . $parts[1]) {
      case 'field.field':
        $field_config = FieldConfig::loadByName($parts[2], $parts[3], $parts[4]);

        if ($field_config instanceof FieldConfigInterface) {
          $field_config->setDescription($data);
        }
        else {
          $field_config = FieldConfig::create($data);
        }

        $field_config->save();
        break;
    }

    $sandbox['#finished'] = $sandbox['current'] / $sandbox['total'];
  }
}

/**
 * Add the new group visibility field.
 */
function blp_flex_groups_project_update_8902() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8902');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Configuration update.
 */
function blp_flex_groups_project_update_8903() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8903');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Updated fieldsets labels and re-arranged existing fields.
 */
function blp_flex_groups_project_update_8904() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8904');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Added "Additional information" fieldset to flexible groups.
 */
function blp_flex_groups_project_update_8905() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8905');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update label for field_group_image field.
 */
function blp_flex_groups_project_update_8906() {
  // Load the existing configuration.
  $config_name = 'field.field.group.blp_project.field_group_image';
  $config = \Drupal::configFactory()->getEditable($config_name);
  $config_data = $config->getRawData();

  if (!empty($config_data['label'])) {
    // This to ensure any custom added values are not affected.
    if (strpos($config_data['label'], 'Group Image') !== FALSE) {
      $config_data['label'] = 'Image';
    }

    $config->setData($config_data)->save();
    // Make sure we clear cached definitions for the fields.
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  }
}

/**
 * Create new field & field storage configuration for new group type field.
 */
function blp_flex_groups_project_update_8907(&$sandbox) {
  $config_file = drupal_get_path('module', 'blp_flex_groups_project') . '/config/update/blp_flex_groups_project_update_8907.yml';

  if (is_file($config_file)) {
    $sandbox['configs'] = Yaml::parse(file_get_contents($config_file));
    if (!isset($sandbox['total'])) {
      // Count the amount we need to add to cover batching..
      $sandbox['total'] = count($sandbox['configs']);
      $sandbox['current'] = 0;
    }

    $names = array_keys($sandbox['configs']);
    $name = $names[$sandbox['current']++];
    $data = $sandbox['configs'][$name];

    $parts = explode('.', $name);

    switch ($parts[0] . '.' . $parts[1]) {
      case 'field.field':
        $field_config = FieldConfig::loadByName($parts[2], $parts[3], $parts[4]);

        if ($field_config instanceof FieldConfigInterface) {
          $field_config->setDescription($data);
        }
        else {
          $field_config = FieldConfig::create($data);
        }

        $field_config->save();
        break;
    }

    $sandbox['#finished'] = $sandbox['current'] / $sandbox['total'];
  }
}



/**
 * Added a new entity reference field called 'Type' in Flexible groups.
 */
function blp_flex_groups_project_update_8908() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8908');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Make group creators as a group managers by default.
 */
function blp_flex_groups_project_update_8909() {
  $config_factory = \Drupal::configFactory();
  $group_type = 'blp_project';

  $config = $config_factory->getEditable('group.type.' . $group_type);
  $config->set('creator_membership', TRUE);

  $creator_roles = $config->get('creator_roles');
  $group_role_id = $group_type . '-group_manager';
  if (!in_array($group_role_id, $creator_roles)) {
    $creator_roles[] = $group_role_id;
    $config->set('creator_roles', $creator_roles);
  }

  $config->save(TRUE);
}

/**
 * Make fields translatable.
 */
function blp_flex_groups_project_update_8910() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('blp_flex_groups_project', 'blp_flex_groups_project_update_8910');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}



